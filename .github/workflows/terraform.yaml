name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      stage:
        type: choice
        description: choose terraform stage as apply, destroy or only plan
        required: true
        default: 'only plan - apply'
        options: 
        - apply
        - destroy
        - 'only plan - apply'
        - 'only plan - destroy'
      machine-type:
        type: choice
        description: set the machine type of kubernetes node pool
        required: false
        default: e2-standard-2
        options:
        - e2-standard-2
        - e2-standard-4

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setting tfstate bucket, variables
    - name: Setting backend, variables
      run : |-
        sed -i 's/<<terraform_state_bucket_name>>/'${{ vars.TFSTATE_BUCKET }}'/' provider.tf
        sed -i 's/<<region>>/'${{ vars.GCP_REGION }}'/' terraform.tfvars
        sed -i 's/<<project_id>>/'${{ vars.GCP_PROJECT }}'/' terraform.tfvars
    
    - name: Setting node pool machine type
      if: ${{ github.event.inputs.machine-type != '' }}
      run: echo -e '\ngke_node_machine_type = "${{ github.event.inputs.machine-type }}"' >> terraform.tfvars

    # Google Cloud Authentication
    - name : Setup Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ vars.GCP_PROJECT }}
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan (apply)
      if: ${{ endswith(github.event.inputs.stage, 'apply') }}
      run: terraform plan -input=false
    - name: Terraform Plan (destroy)
      if: ${{ endswith(github.event.inputs.stage, 'destroy') }}
      run: terraform plan -destroy -input=false

      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event.inputs.stage == 'apply'
      run: terraform apply -auto-approve -input=false

    - name: Terraform Destroy
      if: github.ref == 'refs/heads/main' && github.event.inputs.stage == 'destroy'
      run: terraform destroy -auto-approve -input=false
